{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Observations and Insights "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1888</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>25</td>\n",
       "      <td>63.145652</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1889</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>65.841013</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "      <td>69.176246</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1891</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>40</td>\n",
       "      <td>70.314904</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1892</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>73.867845</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1893 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0        k403     Ramicane  Male          21          16          0   \n",
       "1        k403     Ramicane  Male          21          16          5   \n",
       "2        k403     Ramicane  Male          21          16         10   \n",
       "3        k403     Ramicane  Male          21          16         15   \n",
       "4        k403     Ramicane  Male          21          16         20   \n",
       "...       ...          ...   ...         ...         ...        ...   \n",
       "1888     z969     Naftisol  Male           9          30         25   \n",
       "1889     z969     Naftisol  Male           9          30         30   \n",
       "1890     z969     Naftisol  Male           9          30         35   \n",
       "1891     z969     Naftisol  Male           9          30         40   \n",
       "1892     z969     Naftisol  Male           9          30         45   \n",
       "\n",
       "      Tumor Volume (mm3)  Metastatic Sites  \n",
       "0              45.000000                 0  \n",
       "1              38.825898                 0  \n",
       "2              35.014271                 1  \n",
       "3              34.223992                 1  \n",
       "4              32.997729                 1  \n",
       "...                  ...               ...  \n",
       "1888           63.145652                 2  \n",
       "1889           65.841013                 3  \n",
       "1890           69.176246                 4  \n",
       "1891           70.314904                 4  \n",
       "1892           73.867845                 4  \n",
       "\n",
       "[1893 rows x 8 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "\n",
    "# Study data files\n",
    "mouse_metadata_path = \"data/Mouse_metadata.csv\"\n",
    "study_results_path = \"data/Study_results.csv\"\n",
    "\n",
    "# Read the mouse data and the study results\n",
    "meta = pd.read_csv(mouse_metadata_path)\n",
    "results = pd.read_csv(study_results_path)\n",
    "\n",
    "# Combine the data into a single dataset\n",
    "data = meta.merge(results,on = 'Mouse ID')\n",
    "# Display the data table for preview\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "249"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of mice.\n",
    "len(data['Mouse ID'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>909</th>\n",
       "      <td>g989</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>911</th>\n",
       "      <td>g989</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "      <td>5</td>\n",
       "      <td>47.570392</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>913</th>\n",
       "      <td>g989</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "      <td>10</td>\n",
       "      <td>49.880528</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>915</th>\n",
       "      <td>g989</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "      <td>15</td>\n",
       "      <td>53.442020</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>917</th>\n",
       "      <td>g989</td>\n",
       "      <td>Propriva</td>\n",
       "      <td>Female</td>\n",
       "      <td>21</td>\n",
       "      <td>26</td>\n",
       "      <td>20</td>\n",
       "      <td>54.657650</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Mouse ID Drug Regimen     Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "909     g989     Propriva  Female          21          26          0   \n",
       "911     g989     Propriva  Female          21          26          5   \n",
       "913     g989     Propriva  Female          21          26         10   \n",
       "915     g989     Propriva  Female          21          26         15   \n",
       "917     g989     Propriva  Female          21          26         20   \n",
       "\n",
       "     Tumor Volume (mm3)  Metastatic Sites  \n",
       "909           45.000000                 0  \n",
       "911           47.570392                 0  \n",
       "913           49.880528                 0  \n",
       "915           53.442020                 0  \n",
       "917           54.657650                 1  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the duplicate mice by ID number that shows up for Mouse ID and Timepoint. \n",
    "\n",
    "duprow = data[data.duplicated(['Mouse ID','Timepoint'])]\n",
    "duprow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Optional: Get all the data for the duplicate mouse ID. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1888</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>25</td>\n",
       "      <td>63.145652</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1889</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>30</td>\n",
       "      <td>65.841013</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "      <td>69.176246</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1891</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>40</td>\n",
       "      <td>70.314904</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1892</th>\n",
       "      <td>z969</td>\n",
       "      <td>Naftisol</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>73.867845</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1888 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0        k403     Ramicane  Male          21          16          0   \n",
       "1        k403     Ramicane  Male          21          16          5   \n",
       "2        k403     Ramicane  Male          21          16         10   \n",
       "3        k403     Ramicane  Male          21          16         15   \n",
       "4        k403     Ramicane  Male          21          16         20   \n",
       "...       ...          ...   ...         ...         ...        ...   \n",
       "1888     z969     Naftisol  Male           9          30         25   \n",
       "1889     z969     Naftisol  Male           9          30         30   \n",
       "1890     z969     Naftisol  Male           9          30         35   \n",
       "1891     z969     Naftisol  Male           9          30         40   \n",
       "1892     z969     Naftisol  Male           9          30         45   \n",
       "\n",
       "      Tumor Volume (mm3)  Metastatic Sites  \n",
       "0              45.000000                 0  \n",
       "1              38.825898                 0  \n",
       "2              35.014271                 1  \n",
       "3              34.223992                 1  \n",
       "4              32.997729                 1  \n",
       "...                  ...               ...  \n",
       "1888           63.145652                 2  \n",
       "1889           65.841013                 3  \n",
       "1890           69.176246                 4  \n",
       "1891           70.314904                 4  \n",
       "1892           73.867845                 4  \n",
       "\n",
       "[1888 rows x 8 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a clean DataFrame by dropping the duplicate mouse by its ID.\n",
    "dropindex = duprow.index\n",
    "cdata = data.drop(dropindex,axis = 0)\n",
    "cdata\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "249"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the number of mice in the clean DataFrame.\n",
    "len(cdata['Mouse ID'].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Average</th>\n",
       "      <th>Median</th>\n",
       "      <th>Standard Deviation</th>\n",
       "      <th>Variance</th>\n",
       "      <th>Standard Error</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Capomulin</th>\n",
       "      <td>40.675741</td>\n",
       "      <td>41.557809</td>\n",
       "      <td>4.994774</td>\n",
       "      <td>24.947764</td>\n",
       "      <td>0.329346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ceftamin</th>\n",
       "      <td>52.591172</td>\n",
       "      <td>51.776157</td>\n",
       "      <td>6.268188</td>\n",
       "      <td>39.290177</td>\n",
       "      <td>0.469821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Infubinol</th>\n",
       "      <td>52.884795</td>\n",
       "      <td>51.820584</td>\n",
       "      <td>6.567243</td>\n",
       "      <td>43.128684</td>\n",
       "      <td>0.492236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ketapril</th>\n",
       "      <td>55.235638</td>\n",
       "      <td>53.698743</td>\n",
       "      <td>8.279709</td>\n",
       "      <td>68.553577</td>\n",
       "      <td>0.603860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Naftisol</th>\n",
       "      <td>54.331565</td>\n",
       "      <td>52.509285</td>\n",
       "      <td>8.134708</td>\n",
       "      <td>66.173479</td>\n",
       "      <td>0.596466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Placebo</th>\n",
       "      <td>54.033581</td>\n",
       "      <td>52.288934</td>\n",
       "      <td>7.821003</td>\n",
       "      <td>61.168083</td>\n",
       "      <td>0.581331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propriva</th>\n",
       "      <td>52.393463</td>\n",
       "      <td>50.909965</td>\n",
       "      <td>6.568014</td>\n",
       "      <td>43.138803</td>\n",
       "      <td>0.525862</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ramicane</th>\n",
       "      <td>40.216745</td>\n",
       "      <td>40.673236</td>\n",
       "      <td>4.846308</td>\n",
       "      <td>23.486704</td>\n",
       "      <td>0.320955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stelasyn</th>\n",
       "      <td>54.233149</td>\n",
       "      <td>52.431737</td>\n",
       "      <td>7.710419</td>\n",
       "      <td>59.450562</td>\n",
       "      <td>0.573111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zoniferol</th>\n",
       "      <td>53.236507</td>\n",
       "      <td>51.818479</td>\n",
       "      <td>6.966589</td>\n",
       "      <td>48.533355</td>\n",
       "      <td>0.516398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Average     Median  Standard Deviation   Variance  \\\n",
       "Drug Regimen                                                        \n",
       "Capomulin     40.675741  41.557809            4.994774  24.947764   \n",
       "Ceftamin      52.591172  51.776157            6.268188  39.290177   \n",
       "Infubinol     52.884795  51.820584            6.567243  43.128684   \n",
       "Ketapril      55.235638  53.698743            8.279709  68.553577   \n",
       "Naftisol      54.331565  52.509285            8.134708  66.173479   \n",
       "Placebo       54.033581  52.288934            7.821003  61.168083   \n",
       "Propriva      52.393463  50.909965            6.568014  43.138803   \n",
       "Ramicane      40.216745  40.673236            4.846308  23.486704   \n",
       "Stelasyn      54.233149  52.431737            7.710419  59.450562   \n",
       "Zoniferol     53.236507  51.818479            6.966589  48.533355   \n",
       "\n",
       "              Standard Error  \n",
       "Drug Regimen                  \n",
       "Capomulin           0.329346  \n",
       "Ceftamin            0.469821  \n",
       "Infubinol           0.492236  \n",
       "Ketapril            0.603860  \n",
       "Naftisol            0.596466  \n",
       "Placebo             0.581331  \n",
       "Propriva            0.525862  \n",
       "Ramicane            0.320955  \n",
       "Stelasyn            0.573111  \n",
       "Zoniferol           0.516398  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "taverage = data['Tumor Volume (mm3)'].groupby(cdata['Drug Regimen']).mean()\n",
    "tmedian = data['Tumor Volume (mm3)'].groupby(cdata['Drug Regimen']).median()\n",
    "tstd = data['Tumor Volume (mm3)'].groupby(cdata['Drug Regimen']).std()\n",
    "tvar = data['Tumor Volume (mm3)'].groupby(cdata['Drug Regimen']).var()\n",
    "tsem = data['Tumor Volume (mm3)'].groupby(cdata['Drug Regimen']).sem()\n",
    "\n",
    "stats = pd.DataFrame({\n",
    "    'Average' : taverage,\n",
    "    'Median':tmedian,\n",
    "    'Standard Deviation':tstd,\n",
    "    'Variance':tvar,\n",
    "    'Standard Error':tsem})\n",
    "stats\n",
    "# This method is the most straighforward, creating multiple series and putting them all together at the end.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bar and Pie Charts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fa8ee483d50>"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing the total number of mice for each treatment throughout the course of the study using pandas. \n",
    "miceregime = data['Mouse ID'].groupby(cdata['Drug Regimen']).count()\n",
    "miceregime.plot.bar()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 10 artists>"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing the total number of mice for each treatment throughout the course of the study using pyplot.\n",
    "x_axis = cdata['Drug Regimen'].unique()\n",
    "\n",
    "plt.bar(x_axis, miceregime)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fa8eeeff0d0>"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pandas\n",
    "miceregime = data['Mouse ID'].groupby(cdata['Drug Regimen']).count()\n",
    "miceregime.plot.pie()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.patches.Wedge at 0x7fa8efac2190>,\n",
       "  <matplotlib.patches.Wedge at 0x7fa8efac24d0>,\n",
       "  <matplotlib.patches.Wedge at 0x7fa8efac2550>,\n",
       "  <matplotlib.patches.Wedge at 0x7fa8efae1090>,\n",
       "  <matplotlib.patches.Wedge at 0x7fa8efae1310>,\n",
       "  <matplotlib.patches.Wedge at 0x7fa8efae1e90>,\n",
       "  <matplotlib.patches.Wedge at 0x7fa8efac51d0>,\n",
       "  <matplotlib.patches.Wedge at 0x7fa8efac5250>,\n",
       "  <matplotlib.patches.Wedge at 0x7fa8efae1110>,\n",
       "  <matplotlib.patches.Wedge at 0x7fa8efac5cd0>],\n",
       " [Text(1.0204194928737198, 0.4107846863788144, ''),\n",
       "  Text(0.5362052726346711, 0.9604602571677697, ''),\n",
       "  Text(-0.09141333488814901, 1.0961950566412109, ''),\n",
       "  Text(-0.702068627877636, 0.8468173603263065, ''),\n",
       "  Text(-1.064081187039184, 0.2788032054860229, ''),\n",
       "  Text(-1.0316298255570249, -0.38175895932012205, ''),\n",
       "  Text(-0.6706052107628784, -0.8719453258649167, ''),\n",
       "  Text(-0.01830287505144982, -1.0998477188978715, ''),\n",
       "  Text(0.6778365030103217, -0.8663357750818895, ''),\n",
       "  Text(1.0499413351770994, -0.32805973950872136, '')])"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pyplot\n",
    "x_axis = cdata['Drug Regimen'].unique()\n",
    "\n",
    "plt.pie(miceregime)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quartiles, Outliers and Boxplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the final tumor volume of each mouse across four of the treatment regimens:  \n",
    "# Capomulin, Ramicane, Infubinol, and Ceftamin\n",
    "\n",
    "# Start by getting the last (greatest) timepoint for each mouse\n",
    "\n",
    "\n",
    "# Merge this group df with the original dataframe to get the tumor volume at the last timepoint\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put treatments into a list for for loop (and later for plot labels)\n",
    "\n",
    "\n",
    "# Create empty list to fill with tumor vol data (for plotting)\n",
    "\n",
    "\n",
    "# Calculate the IQR and quantitatively determine if there are any potential outliers. \n",
    "\n",
    "    \n",
    "    # Locate the rows which contain mice on each drug and get the tumor volumes\n",
    "    \n",
    "    \n",
    "    # add subset \n",
    "    \n",
    "    \n",
    "    # Determine outliers using upper and lower bounds\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a box plot of the final tumor volume of each mouse across four regimens of interest\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Line and Scatter Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a line plot of time point versus tumor volume for a mouse treated with Capomulin\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate a scatter plot of mouse weight versus average tumor volume for the Capomulin regimen\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlation and Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the correlation coefficient and linear regression model \n",
    "# for mouse weight and average tumor volume for the Capomulin regimen\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
